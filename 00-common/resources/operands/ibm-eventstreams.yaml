apiVersion: eventstreams.ibm.com/v1beta2
kind: EventStreams
metadata:
  name: es
spec:
  version: latest
  license:
    accept: true
    use: CloudPakForIntegrationNonProduction
    license: 'L-JTPV-KYG8TF'
  adminApi: {}
  adminUI: {}
  apicurioRegistry: {}
  collector: {}
  kafkaProxy: {}
  strimziOverrides:
    kafka:
      replicas: 3
      authorization:
        type: custom
        supportsAdminApi: true
        authorizerClass: com.ibm.eventstreams.runas.authorizer.RunAsAuthorizer
      config:
        inter.broker.protocol.version: '3.4'
        log.cleaner.threads: 6
        num.io.threads: 24
        num.network.threads: 9
        num.replica.fetchers: 3
        offsets.topic.replication.factor: 3
        default.replication.factor: 3
        min.insync.replicas: 2
      listeners:
        - name: tls
          port: 9093
          type: internal
          tls: true
          authentication:
            type: scram-sha-512
      storage:
        type: persistent-claim
        size: 20Gi
        class: STORAGECLASS_FROM_OVERRIDES
      metricsConfig:
        type: jmxPrometheusExporter
        valueFrom:
          configMapKeyRef:
            key: kafka-metrics-config.yaml
            name: metrics-config
    kafkaExporter:
      groupRegex: ".*"
      topicRegex: ".*"
    zookeeper:
      replicas: 3
      storage:
        type: persistent-claim
        size: 3Gi
        class: STORAGECLASS_FROM_OVERRIDES
      metricsConfig:
        type: jmxPrometheusExporter
        valueFrom:
          configMapKeyRef:
            key: zookeeper-metrics-config.yaml
            name: metrics-config
    entityOperator:
      topicOperator: {}
  requestIbmServices:
    iam: true
    monitoring: true
