apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: buildah-local
  labels:
    app.kubernetes.io/version: "0.5"
  annotations:
    tekton.dev/categories: Image Build
    tekton.dev/pipelines.minVersion: "0.17.0"
    tekton.dev/tags: image-build
    tekton.dev/platforms: "linux/amd64,linux/s390x,linux/ppc64le,linux/arm64"
spec:
  description: >-
    Modified to login to image-registry.openshift-image-registry.svc

    Buildah task builds source into a container image and
    then pushes it to a container registry.

    Buildah Task builds source into a container image using Project Atomic's
    Buildah build tool.It uses Buildah's support for building from Dockerfiles,
    using its buildah bud command.This command executes the directives in the
    Dockerfile to assemble a container image, then pushes that image to a
    container registry.

  params:
  - name: IMAGE
    description: Reference of the image buildah will produce.
  - name: BUILDER_IMAGE
    description: The location of the buildah builder image.
    default: quay.io/buildah/stable:v1.23.3
  - name: STORAGE_DRIVER
    description: Set buildah storage driver
    default: overlay
  - name: DOCKERFILE
    description: Path to the Dockerfile to build.
    default: ./Dockerfile
  - name: CONTEXT
    description: Path to the directory to use as context.
    default: .
  - name: TLSVERIFY
    description: Verify the TLS on the registry endpoint (for push/pull to a non-TLS registry)
    default: "true"
  - name: FORMAT
    description: The format of the built container, oci or docker
    default: "oci"
  - name: BUILD_EXTRA_ARGS
    description: Extra parameters passed for the build command when building images.
    default: ""
  - name: PUSH_EXTRA_ARGS
    description: Extra parameters passed for the push command when pushing images.
    type: string
    default: ""
  - name: SKIP_PUSH
    description: Skip pushing the built image
    default: "false"
  workspaces:
  - name: source
  - name: sslcertdir
    optional: true
  - name: dockerconfig
    description: >-
      An optional workspace that allows providing a .docker/config.json file
      for Buildah to access the container registry.
      The file should be placed at the root of the Workspace with name config.json.
    optional: true
  results:
  - name: IMAGE_DIGEST
    description: Digest of the image just built.
  - name: IMAGE_URL
    description: Image repository where the built image would be pushed to
  steps:
  - name: build
    image: $(params.BUILDER_IMAGE)
    workingDir: $(workspaces.source.path)
    script: |
      if [[ "$(workspaces.dockerconfig.bound)" == "true" ]]; then
      # Create directories for Docker configs
      mkdir -p /tmp/dockerconfig_original
      mkdir -p /tmp/dockerconfig_openshift
      mkdir -p /tmp/dockerconfig

      # Copy the original Docker config
      cp "$(workspaces.dockerconfig.path)/config.json" /tmp/dockerconfig_original/config.json

      # Export the original Docker config path
      export DOCKER_CONFIG="/tmp/dockerconfig_original/"
      echo "Original Docker config:"
      ls -l $DOCKER_CONFIG
      cat $DOCKER_CONFIG/config.json

      # Login to the OpenShift image registry
      buildah login -u serviceaccount -p "$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)" --authfile /tmp/dockerconfig_openshift/config.json image-registry.openshift-image-registry.svc:5000

      # Merge the auth sections manually
      AUTH1=$(sed '1d;$d' /tmp/dockerconfig_original/config.json)
      AUTH2=$(sed '1d;$d' /tmp/dockerconfig_openshift/config.json)

      # Combine the two auth sections, removing duplicates
      MERGED_AUTH=$(echo "$AUTH1,$AUTH2" | sed 's/,,/,/g' | sed 's/},}/}}/g' | sed 's/{,//g' | sed 's/,}/}/g' | sed 's/,  */,/g')

      # Create the merged config.json
      echo "{\"auths\": {$MERGED_AUTH}}" > /tmp/dockerconfig/config.json

      # Set the merged Docker config as the active one
      export DOCKER_CONFIG="/tmp/dockerconfig/"

      echo "Merged Docker config:"
      ls -l $DOCKER_CONFIG
      cat $DOCKER_CONFIG/config.json
      fi

      [[ "$(workspaces.sslcertdir.bound)" == "true" ]] && CERT_DIR_FLAG="--cert-dir $(workspaces.sslcertdir.path)"
      buildah ${CERT_DIR_FLAG} --storage-driver=$(params.STORAGE_DRIVER) bud \
        $(params.BUILD_EXTRA_ARGS) --format=$(params.FORMAT) \
        --tls-verify=$(params.TLSVERIFY) --no-cache \
        -f $(params.DOCKERFILE) -t $(params.IMAGE) $(params.CONTEXT)
      [[ "$(params.SKIP_PUSH)" == "true" ]] && echo "Push skipped" && exit 0

      buildah ${CERT_DIR_FLAG} --storage-driver=$(params.STORAGE_DRIVER) push \
        $(params.PUSH_EXTRA_ARGS) --tls-verify=$(params.TLSVERIFY) \
        --digestfile /tmp/image-digest $(params.IMAGE) \
        docker://$(params.IMAGE)
      cat /tmp/image-digest | tee $(results.IMAGE_DIGEST.path)
      echo "$(params.IMAGE)" | tee $(results.IMAGE_URL.path)
    volumeMounts:
    - name: varlibcontainers
      mountPath: /var/lib/containers
    securityContext:
      privileged: true
  volumes:
  - name: varlibcontainers
    emptyDir: {}